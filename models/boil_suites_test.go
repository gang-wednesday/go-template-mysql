// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Authors", testAuthors)
	t.Run("GorpMigrations", testGorpMigrations)
	t.Run("Posts", testPosts)
	t.Run("Roles", testRoles)
}

func TestDelete(t *testing.T) {
	t.Run("Authors", testAuthorsDelete)
	t.Run("GorpMigrations", testGorpMigrationsDelete)
	t.Run("Posts", testPostsDelete)
	t.Run("Roles", testRolesDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Authors", testAuthorsQueryDeleteAll)
	t.Run("GorpMigrations", testGorpMigrationsQueryDeleteAll)
	t.Run("Posts", testPostsQueryDeleteAll)
	t.Run("Roles", testRolesQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Authors", testAuthorsSliceDeleteAll)
	t.Run("GorpMigrations", testGorpMigrationsSliceDeleteAll)
	t.Run("Posts", testPostsSliceDeleteAll)
	t.Run("Roles", testRolesSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Authors", testAuthorsExists)
	t.Run("GorpMigrations", testGorpMigrationsExists)
	t.Run("Posts", testPostsExists)
	t.Run("Roles", testRolesExists)
}

func TestFind(t *testing.T) {
	t.Run("Authors", testAuthorsFind)
	t.Run("GorpMigrations", testGorpMigrationsFind)
	t.Run("Posts", testPostsFind)
	t.Run("Roles", testRolesFind)
}

func TestBind(t *testing.T) {
	t.Run("Authors", testAuthorsBind)
	t.Run("GorpMigrations", testGorpMigrationsBind)
	t.Run("Posts", testPostsBind)
	t.Run("Roles", testRolesBind)
}

func TestOne(t *testing.T) {
	t.Run("Authors", testAuthorsOne)
	t.Run("GorpMigrations", testGorpMigrationsOne)
	t.Run("Posts", testPostsOne)
	t.Run("Roles", testRolesOne)
}

func TestAll(t *testing.T) {
	t.Run("Authors", testAuthorsAll)
	t.Run("GorpMigrations", testGorpMigrationsAll)
	t.Run("Posts", testPostsAll)
	t.Run("Roles", testRolesAll)
}

func TestCount(t *testing.T) {
	t.Run("Authors", testAuthorsCount)
	t.Run("GorpMigrations", testGorpMigrationsCount)
	t.Run("Posts", testPostsCount)
	t.Run("Roles", testRolesCount)
}

func TestHooks(t *testing.T) {
	t.Run("Authors", testAuthorsHooks)
	t.Run("GorpMigrations", testGorpMigrationsHooks)
	t.Run("Posts", testPostsHooks)
	t.Run("Roles", testRolesHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Authors", testAuthorsInsert)
	t.Run("Authors", testAuthorsInsertWhitelist)
	t.Run("GorpMigrations", testGorpMigrationsInsert)
	t.Run("GorpMigrations", testGorpMigrationsInsertWhitelist)
	t.Run("Posts", testPostsInsert)
	t.Run("Posts", testPostsInsertWhitelist)
	t.Run("Roles", testRolesInsert)
	t.Run("Roles", testRolesInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("AuthorToRoleUsingRole", testAuthorToOneRoleUsingRole)
	t.Run("PostToAuthorUsingAuthor", testPostToOneAuthorUsingAuthor)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("AuthorToPosts", testAuthorToManyPosts)
	t.Run("RoleToAuthors", testRoleToManyAuthors)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("AuthorToRoleUsingAuthors", testAuthorToOneSetOpRoleUsingRole)
	t.Run("PostToAuthorUsingPosts", testPostToOneSetOpAuthorUsingAuthor)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("AuthorToRoleUsingAuthors", testAuthorToOneRemoveOpRoleUsingRole)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("AuthorToPosts", testAuthorToManyAddOpPosts)
	t.Run("RoleToAuthors", testRoleToManyAddOpAuthors)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("RoleToAuthors", testRoleToManySetOpAuthors)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("RoleToAuthors", testRoleToManyRemoveOpAuthors)
}

func TestReload(t *testing.T) {
	t.Run("Authors", testAuthorsReload)
	t.Run("GorpMigrations", testGorpMigrationsReload)
	t.Run("Posts", testPostsReload)
	t.Run("Roles", testRolesReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Authors", testAuthorsReloadAll)
	t.Run("GorpMigrations", testGorpMigrationsReloadAll)
	t.Run("Posts", testPostsReloadAll)
	t.Run("Roles", testRolesReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Authors", testAuthorsSelect)
	t.Run("GorpMigrations", testGorpMigrationsSelect)
	t.Run("Posts", testPostsSelect)
	t.Run("Roles", testRolesSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Authors", testAuthorsUpdate)
	t.Run("GorpMigrations", testGorpMigrationsUpdate)
	t.Run("Posts", testPostsUpdate)
	t.Run("Roles", testRolesUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Authors", testAuthorsSliceUpdateAll)
	t.Run("GorpMigrations", testGorpMigrationsSliceUpdateAll)
	t.Run("Posts", testPostsSliceUpdateAll)
	t.Run("Roles", testRolesSliceUpdateAll)
}
