package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"context"
	"fmt"
	"go-template/daos"
	"go-template/gqlmodels"
	"go-template/internal/middleware/auth"
	"go-template/pkg/utl/cnvrttogql"
	redisutil "go-template/pkg/utl/redisUtil"
	"go-template/pkg/utl/rediscache"

	"github.com/volatiletech/sqlboiler/v4/queries/qm"
)

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*gqlmodels.Author, error) {
	authorID := auth.AuthorIDFromContext(ctx)
	author, err := rediscache.GetAuthorById(redisutil.GetClient(), ctx, authorID)
	if err != nil {
		return nil, err
	}
	return cnvrttogql.AuthorToGraphQlAuthor(author, 0), nil
}

// Authors is the resolver for the authors field.
func (r *queryResolver) Authors(ctx context.Context, pagination *gqlmodels.AuthorPagination) (*gqlmodels.AuthorsPayload, error) {
	var queryMods []qm.QueryMod
	if pagination != nil {
		if pagination.Limit != 0 {
			queryMods = append(queryMods, qm.Limit(pagination.Limit), qm.Offset(pagination.Page*pagination.Limit))
		}
	}
	authors, count, err := daos.FindAllAuthorWithCount(queryMods, ctx)
	if err != nil {
		return nil, err
	}
	return &gqlmodels.AuthorsPayload{Total: int(count), Authors: cnvrttogql.AuthorssToGraphQlAuthors(authors, 1)}, nil
}

// AuthorSearch is the resolver for the authorSearch field.
func (r *queryResolver) AuthorSearch(ctx context.Context, filter *gqlmodels.AuthorFilter) (*gqlmodels.AuthorsPayload, error) {
	panic(fmt.Errorf("not implemented: AuthorSearch - authorSearch"))
}

// Query returns gqlmodels.QueryResolver implementation.
func (r *Resolver) Query() gqlmodels.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
