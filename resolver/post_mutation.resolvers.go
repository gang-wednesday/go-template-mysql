package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"context"
	"fmt"
	"go-template/daos"
	"go-template/gqlmodels"
	"go-template/internal/middleware/auth"
	"go-template/models"
	"go-template/pkg/utl/cnvrttogql"
	"strconv"
)

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, input gqlmodels.PostCreateInput) (*gqlmodels.Post, error) {
	authorID := auth.AuthorIDFromContext(ctx)
	p := models.Post{
		AuthorID: authorID,
	}
	if input.Content == nil {
		return nil, fmt.Errorf("content not present")
	}
	if input.Title == nil {
		return nil, fmt.Errorf("title not present")
	}
	p.Content = *input.Content
	p.Title = *input.Title
	_, err := daos.CreatePost(p, ctx)
	if err != nil {
		return nil, err
	}
	return cnvrttogql.PostToGraphQlPost(&p, 1), nil
	// 	Content: null.StringFrom(*input.Content),
	// }

}

// UpdatePost is the resolver for the updatePost field.
func (r *mutationResolver) UpdatePost(ctx context.Context, input gqlmodels.PostUpdateInput) (*gqlmodels.Post, error) {
	pid, err := strconv.Atoi(input.ID)
	if err != nil {
		return nil, err
	}
	post, err := daos.FindPostbyId(pid, ctx)
	if err != nil {
		return nil, err
	}
	authorID := auth.AuthorIDFromContext(ctx)
	if post.AuthorID == authorID {
		return nil, fmt.Errorf("author does not own the post")
	}
	if input.Title != nil {
		post.Title = *input.Title
	}
	if input.Content != nil {
		post.Content = *input.Content
	}
	_, err = daos.Updatepost(*post, ctx)
	if err != nil {
		return nil, err
	}
	return cnvrttogql.PostToGraphQlPost(post, 1), err

}

// DeletePost is the resolver for the deletePost field.
func (r *mutationResolver) DeletePost(ctx context.Context, input gqlmodels.PostDeleteInput) (bool, error) {
	panic("")
}
